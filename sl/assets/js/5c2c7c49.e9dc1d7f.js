"use strict";(self.webpackChunkdocusaurus_osebna=self.webpackChunkdocusaurus_osebna||[]).push([["66"],{4351:function(e,n,s){s.r(n),s.d(n,{assets:function(){return l},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return i},metadata:function(){return t},toc:function(){return c}});var t=s(8425),r=s(5893),a=s(65);let i={slug:"paperless-ngx-ldap",title:"ldap3 in paperless-ngx",authors:["rok"],tags:["paperless-ngx","ldap3"],image:"/img/blog_img/2024-12-23-paperles-ngx.png"},o="Integrating LDAP Authentication with Paperless-ngx using ldap3",l={authorsImageUrls:[void 0]},c=[{value:"Custom LDAP Authentication Backend",id:"custom-ldap-authentication-backend",level:2},{value:"Key Features of the Backend",id:"key-features-of-the-backend",level:2},{value:"Adding LDAP Support to Paperless-ngx",id:"adding-ldap-support-to-paperless-ngx",level:2},{value:"Custom Docker Image",id:"custom-docker-image",level:3},{value:"Build and Run the Docker Image",id:"build-and-run-the-docker-image",level:3},{value:"Docker compose example with existing postgresql",id:"docker-compose-example-with-existing-postgresql",level:4},{value:"Final Thoughts",id:"final-thoughts",level:2}];function p(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components},{Details:s}=n;return!s&&function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["In this post, I will explain how I integrated LDAP authentication into ",(0,r.jsx)(n.a,{href:"https://github.com/paperless-ngx/paperless-ngx",children:"Paperless-ngx"})," using the ",(0,r.jsx)(n.code,{children:"ldap3"})," library. By leveraging LDAP, we can centrally manage user authentication, ensuring secure and streamlined access to Paperless-ngx."]}),"\n",(0,r.jsx)(n.h2,{id:"custom-ldap-authentication-backend",children:"Custom LDAP Authentication Backend"}),"\n",(0,r.jsxs)(n.p,{children:["The first step is creating a custom Django authentication backend. This backend uses ",(0,r.jsx)(n.code,{children:"ldap3"})," to authenticate users against the LDAP directory. Here's the complete implementation:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="ldap_auth_backend.py"',children:'\nimport logging\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.backends import BaseBackend\nfrom ldap3 import Server, Connection, ALL, NTLM, SUBTREE\n\n# LDAP Server Configuration\nLDAP_SERVER = "ldap://example.com:3268"\nLDAP_AUTH_SEARCH_BASE = "ou=it,ou=departments,dc=example,dc=com"\nLDAP_AUTH_CONNECTION_USERNAME = "cn=ldapadmin,ou=users,dc=example,dc=com"\nLDAP_AUTH_CONNECTION_PASSWORD = "pass of ldapadmin"\n\nlogger = logging.getLogger(__name__)\n\nclass LDAPBackend(BaseBackend):\n    def authenticate(self, request, username=None, password=None, **kwargs):\n        server = Server(LDAP_SERVER, get_info=ALL)\n        conn = Connection(server, user=LDAP_AUTH_CONNECTION_USERNAME, password=LDAP_AUTH_CONNECTION_PASSWORD, auto_bind=True)\n\n        # Define the LDAP search filter to find the user by sAMAccountName\n        search_filter = f"(sAMAccountName={username})"\n\n        try:\n            # Search for the user in LDAP\n            conn.search(\n                search_base=LDAP_AUTH_SEARCH_BASE,\n                search_filter=search_filter,\n                search_scope=SUBTREE,\n                attributes=[\'sAMAccountName\', \'mail\', \'givenName\', \'sn\']\n            )\n\n            if conn.entries:\n                # If the user exists, attempt to bind with user\'s credentials to authenticate\n                user_dn = conn.entries[0].entry_dn\n                user_conn = Connection(server, user=user_dn, password=password, auto_bind=True)\n\n                if user_conn.bind():\n                    # Get or create the Django user\n                    user, created = User.objects.get_or_create(username=username)\n                    if created:\n                        user.set_unusable_password()\n                    user.is_staff = True  # Set staff status for LDAP users\n                    user.save()\n                    logger.info(f"User {username} authenticated and {\'created\' if created else \'updated\'} in Django.")\n                    return user\n        except Exception as e:\n            logger.warning(f"LDAP authentication failed for user {username}: {e}")\n            return None\n\n    def get_user(self, user_id):\n        try:\n            return User.objects.get(pk=user_id)\n        except User.DoesNotExist:\n            return None\n'})}),"\n",(0,r.jsx)(n.h2,{id:"key-features-of-the-backend",children:"Key Features of the Backend"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Centralized Authentication"}),": User credentials are verified against the LDAP server."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dynamic User Management"}),": Users are automatically created or updated in the local Django database upon successful authentication."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Logging"}),": Authentication attempts are logged for debugging and auditing purposes."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"adding-ldap-support-to-paperless-ngx",children:"Adding LDAP Support to Paperless-ngx"}),"\n",(0,r.jsx)(n.p,{children:"To integrate this backend into Paperless-ngx, I created a custom Docker image and updated the necessary configuration files."}),"\n",(0,r.jsx)(n.h3,{id:"custom-docker-image",children:"Custom Docker Image"}),"\n",(0,r.jsxs)(n.p,{children:["I extended the official Paperless-ngx Docker image to include the ",(0,r.jsx)(n.code,{children:"ldap3"})," library and the custom authentication backend. Here's the ",(0,r.jsx)(n.code,{children:"Dockerfile"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",children:"# Start from the official paperless-ngx image\nFROM ghcr.io/paperless-ngx/paperless-ngx:latest\n\n# Install LDAP library\nRUN pip install ldap3\n\n# Copy the custom LDAP backend code\nCOPY ldap_auth_backend.py /usr/src/paperless/src/paperless/ldap_auth_backend.py\n\n# Update settings.py to include the LDAP backend using a sed command\nRUN sed -i \"/^AUTHENTICATION_BACKENDS = /a 'paperless.ldap_auth_backend.LDAPBackend',\" /usr/src/paperless/src/paperless/settings.py\n"})}),"\n",(0,r.jsx)(n.h3,{id:"build-and-run-the-docker-image",children:"Build and Run the Docker Image"}),"\n",(0,r.jsx)(n.p,{children:"Use the following commands to build and run the custom Docker image:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Build the Docker image\ndocker build -t paperless-ngx-ldap .\n\n# Run the Docker container\ndocker run -d \\\n  --name paperless-ngx-ldap \\\n  -e PAPERLESS_DBHOST=your_db_host \\\n  -e PAPERLESS_DBPASS=your_db_password \\\n  -e PAPERLESS_TIMEZONE=your_timezone \\\n  -p 8000:8000 \\\n  paperless-ngx-ldap\n"})}),"\n",(0,r.jsx)(n.h4,{id:"docker-compose-example-with-existing-postgresql",children:"Docker compose example with existing postgresql"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"docker-compose.yml example"}),(0,r.jsx)(n.p,{children:"This is an example docker compose file"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="docker-compose.yml"',children:'services:\nbroker:\n  image: docker.io/library/redis:7\n  restart: unless-stopped\n  volumes:\n    - redisdata:/data\n\nwebserver:\n  build: .\n  restart: unless-stopped\n  depends_on:\n    - broker\n    - gotenberg\n    - tika\n  ports:\n    - "8000:8000"\n  volumes:\n    - /home/user/docker-compose/paperless-ngx/data/:/usr/src/paperless/data\n    - /home/user/docker-compose/paperless-ngx/media/:/usr/src/paperless/media\n    - /home/user/docker-compose/paperless-ngx/export:/usr/src/paperless/export\n    - /home/user/docker-compose/paperless-ngx/consume/:/usr/src/paperless/consume\n\n  env_file: docker-compose.env\n  environment:\n    PAPERLESS_REDIS: redis://broker:6379\n    PAPERLESS_TIKA_ENABLED: 1\n    PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000\n    PAPERLESS_TIKA_ENDPOINT: http://tika:9998\n    PAPERLESS_LDAP_PIP_INSTALL: "true"\n\ngotenberg:\n  image: docker.io/gotenberg/gotenberg:7.8\n  restart: unless-stopped\n\n  command:\n    - "gotenberg"\n    - "--chromium-disable-javascript=true"\n    - "--chromium-allow-list=file:///tmp/.*"\n\ntika:\n  image: ghcr.io/paperless-ngx/tika:latest\n  restart: unless-stopped\n\nvolumes:\n  data:\n  media:\n  redisdata:\n\n'})})]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"environment example"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-\xecni",metastring:'title="docker-compose.env"',children:"   PAPERLESS_TIME_ZONE=Europe/Ljubljana\n   PAPERLESS_OCR_LANGUAGE=eng+slv+deu\n   PAPERLESS_SECRET_KEY=OO5345345349urerexuRj1nkKoUmKzJJcq2vBik4Cwre0luVS9iapnLP5\n   PAPERLESS_OCR_LANGUAGES=eng slv deu\n   PAPERLESS_DBENGINE=postgresql\n   PAPERLESS_DBHOST=192.168.1.2\n   PAPERLESS_DBPORT=5432\n   PAPERLESS_DBUSER: paperless\n   PAPERLESS_DBPASS: strongpass\n   PAPERLESS_URL=https://paperless.example.com\n   PAPERLESS_CSRF_TRUSTED_ORIGINS=https://paperless.example.com,https://example.com\n   PAPERLESS_ALLOWED_HOSTS=paperless.paperless.example.com,192.168.1.4,example.com\n   PAPERLESS_CORS_ALLOWED_HOSTS=https://paperless.example.com,https://example.com # can be set using PAPERLESS_URL\n"})})]}),"\n",(0,r.jsx)(n.h2,{id:"final-thoughts",children:"Final Thoughts"}),"\n",(0,r.jsxs)(n.p,{children:["By integrating LDAP authentication into Paperless-ngx, I was able to streamline user management and centralize authentication using our existing LDAP infrastructure. The flexibility of Paperless-ngx and the power of ",(0,r.jsx)(n.code,{children:"ldap3"})," made this integration straightforward and effective. I hope this guide helps others looking to implement similar functionality. There are also others who managed to create usefull integrations on (didn't work for me though): ",(0,r.jsx)(n.a,{href:"https://github.com/paperless-ngx/paperless-ngx/discussions/3228",children:"https://github.com/paperless-ngx/paperless-ngx/discussions/3228"}),"."]})]})}function d(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},65:function(e,n,s){s.d(n,{Z:function(){return o},a:function(){return i}});var t=s(7294);let r={},a=t.createContext(r);function i(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}},8425:function(e){e.exports=JSON.parse('{"permalink":"/rokd.github.io/sl/blog/paperless-ngx-ldap","source":"@site/blog/2024-12-23-paperless-ldap.mdx","title":"ldap3 in paperless-ngx","description":"In this post, I will explain how I integrated LDAP authentication into Paperless-ngx using the ldap3 library. By leveraging LDAP, we can centrally manage user authentication, ensuring secure and streamlined access to Paperless-ngx.","date":"2024-12-23T00:00:00.000Z","tags":[{"inline":true,"label":"paperless-ngx","permalink":"/rokd.github.io/sl/blog/tags/paperless-ngx"},{"inline":true,"label":"ldap3","permalink":"/rokd.github.io/sl/blog/tags/ldap-3"}],"readingTime":3.13,"hasTruncateMarker":false,"authors":[{"name":"Rok Damjani\u0107","title":"IT, sports, nature","url":"https://linkedin.com/in/rok-damjanic","socials":{"linkedin":"https://www.linkedin.com/in/rok-damjanic/","github":"https://github.com/roks531"},"imageURL":"/rokd.github.io/sl/img/profile_photo.jpg","key":"rok","page":null}],"frontMatter":{"slug":"paperless-ngx-ldap","title":"ldap3 in paperless-ngx","authors":["rok"],"tags":["paperless-ngx","ldap3"],"image":"/img/blog_img/2024-12-23-paperles-ngx.png"},"unlisted":false}')}}]);